name: Java CI with Gradle

# main 브랜치에 push, PR 이벤트 발생시 동작.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest


    steps:
      - name: ✅ Checkout
        uses: actions/checkout@v4

      - name: ☕️ Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 각각의 yml 파일 생성
      - name: 📄 application.yml create file
        run: |
          cd common/src/main
          mkdir resources
          cd resources
          touch ./application.yml
          echo "${{ secrets.COMMON_APPLICATION }}" > ./application.yml
          cd ../../../..
          cd chatting-api/src/main
          mkdir resources
          cd resources
          touch ./application.yml
          echo "${{ secrets.CHATTING_API_APPLICATION }}" > ./application.yml
          cd ../../../..
          cd streaming-api/src/main
          mkdir resources
          cd resources
          touch ./application.yml
          echo "${{ secrets.STREAMING_API_APPLICATION }}" > ./application.yml
          cd ../../../..
          cd domain/src/main
          mkdir resources
          cd resources
          touch ./application.yml
          echo "${{ secrets.DOMAIN_APPLICATION }}" > ./application.yml
          cd ../../../..

      - name: 🍀 Spring Boot Build
        run: ./gradlew build

      # Docker-compose 빌드
      - name: 🐳 docker-compose build
        run: docker-compose build

      # DockerHub Login (3)
      - name: 🐳 docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}


      # Docker-compose를 통해 docker Hub에 push
      - name: 🐳 docker-compose Hub push
        run: docker-compose push

      # GET GitHub IP
      - name: 🌱 get GitHub IP
        id: ip
        uses: haythem/public-ip@v1.2

      # Configure AWS Credentials - AWS 접근 권한 취득(IAM)
      - name: 🟠 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # Add github ip to AWS
      - name: 🟠 Add GitHub IP to AWS
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.EC2_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      # AWS EC2 Server Connect & Docker 명령어 실행
      - name: 🟠 AWS EC2 Connection
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          password: ${{ secrets.EC2_PASSWORD }}
          port: 22
          timeout: 60s
          script: |
            sudo docker stop common
            sudo docker rm common
            sudo docker run -d -p 8080:8080 --name common limhyeantaek/common
            sudo docker ps -a

      # REMOVE Github IP FROM security group
      - name: 🟠 Remove IP FROM security group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.EC2_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      

      # Configure AWS Credentials - AWS 접근 권한 취득(IAM)
      - name: 🟧 Configure AWS Credentials2
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_2 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_2 }}
          aws-region: ap-northeast-2

      # Add github ip to AWS
      - name: 🟧 Add GitHub IP to AWS server 2
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.EC2_SG_ID_2 }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      # AWS EC2 Server Connect & Docker 명령어 실행
      - name: 🟧 AWS EC2 Connection2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST_2 }}
          username: ubuntu
          key: ${{AWS_SSH_KEY}}
          port: 22
          timeout: 60s
          script: |
            sudo docker run -d -p 8081:8081 --name chatting-api limhyeantaek/chatting-api
            sudo docker run -d -p 8082:8082 --name streaming-api limhyeantaek/streaming-api
            sudo docker ps -a

      # REMOVE Github IP FROM security group
      - name: 🟧 Remove IP FROM security group 2
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.EC2_SG_ID_2 }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
