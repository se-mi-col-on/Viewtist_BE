name: Java CI with Gradle

# main 브랜치에 push, PR 이벤트 발생시 동작.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest


    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Spring Boot Build
        run: ./gradlew clean build -x test

      - name: Docker Compose up
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker-compose -f docker-compose.yml up -d
          docker images
          docker push ${{ secrets.DOCKER_USERNAME }}/viewtist

      # GET GitHub IP
      - name: get GitHub IP
        id: ip
        uses: haythem/public-ip@v1.2

      # Configure AWS Credentials - AWS 접근 권한 취득(IAM)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # Add github ip to AWS
      - name: Add GitHub IP to AWS
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.EC2_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32

      # AWS EC2 Server Connect & Docker 명령어 실행
      - name: AWS EC2 Connection
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          password: ${{ secrets.EC2_PASSWORD }}
          port: 22
          timeout: 60s
          script: |
            sudo docker stop core
            sudo docker stop chatting-api
            sudo docker stop streaming-api
            sudo docker rm core
            sudo docker rm chatting-api
            sudo docker rm streaming-api
            sudo docker run -it -d -p 8080:8080 --name core ${{ secrets.DOCKER_USERNAME }}/core
            sudo docker run -it -d -p 8081:8081 --name chatting-api ${{ secrets.DOCKER_USERNAME }}/chatting-api
            sudo docker run -it -d -p 8082:8082 --name streaming-api ${{ secrets.DOCKER_USERNAME }}/streaming-api
      
      

      # REMOVE Github IP FROM security group
      - name: Remove IP FROM security group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.EC2_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
